//introduction to javascript   5 Hours 37 Minutes 57 Seconds
 REPl -> Read Evaluate Print Loop   #browser is work as repl but the js file is not work as the repl

# NAN stands for not a number.  type of NAN is number
# undefined is keyword and the type of the undefined is undefined.  same this applicable to null.
#the type of null is object.
//data types in javascript
* primitive(value type)   -> classify into 7 categories
 1. number   -> number is bydefault in number. we can convert number to string.
 2. string   -> tes we can convert.
 3. boolean   -> can convert into the number. true(1) and for the false(0).
 4. undifined   -> can't convert to number.
 5. null   -> we can convert into the number and the value is 0.
 6. bigint
 7. symbol  -> used to represent the unique values that can be used as identifier or keys in object. used to create private properties and methods in classes. useful for creating constants and used in your    code.
* non-primitive(reference type)
 1. object
#how we can convert string to number
 1) by using the + operator. place before the string.
 2) by using the parseInt method which will pic up the digit from the starting only.
  in both condition if number is valid then it will show the number directly else then it will show the NAN. NAN also type of number.
#how we can convert number to string
 1) just add the empty string after or before  the number using + operator.


// variables in javascript
# variables is a container used to store the value.
# we can give name ti the variable by 3 ways.
 1) let keyword
 2) var keyword
 3) const keyword
#variable declaration convention
 A-Z capital letters, a-z small letters, 0-9 digits, $ and _ special symbol.
# programming naming convention
 1) camel case  -> firstName
 2) snake case  -> first_name
 3) cabab case  -> first-name
 4) pascal case  -> FirstName
 
// How the code run line by line in javascript
 1) Memory creation phase
 2) Code Execution phase
 #temporal dead zone -> until assigning the value to the 'const' and 'let' keyword this variables store in the this zone.
 
 // Dialog Boxes in Javascript
 there are 3 types of dialog boxes
 1) alert    -> it will return the undefined if we run on the bowser  
 2) confirm   -> it will return the 'true' if we click on the 'ok' tab. if we click on the 'cancel' tab then it will return 'false'
 3) prompt   -> it will return the text we will written in the textbox. if we didn't type anything then it will return the null.
 
// Template Literals | string methods and properties
# when we use the property we don't put the bracket at the end.  for ex. length property
# when we use the method we put the bracket at the end. for Ex. toUpperCase() 
string methods - 
toUpperCase(), toLowerCase(), trim(), trimStart(), trimEnd(), includes(), charAt(),  indexOf(), replace(), replaceAll(), concat(), padStart(), padEnd(), charCodeAt(), split()
# string template literal

//Math object in Javascript
1) Mathematical operators
  - addition, subtraction, multiplication, division, reminder, exponentiation
2) javascript Math object
3) Math.sqrt() Method
4) Math.pow() Method
5) Math.floor() Method, Math.ceil() Method, Math.round() Method, Math.random() Method, Math.random() and Math.floor() Together
# Understand Infinity and NaN in JavaScript

//Truthy and Falsy Values in javascript

//Comparison Operators in JavaScript
 -- equality, not equal, greater than, less than, greater than equal to, less than equal to || == , ===, !==, !=, >, <, >=, <= 
 
// Logical operators in javascript
 --and , or , not ||  && , ||, !
 1) and operator -> when both the value are true then only it will give the result true. if any one value is false then entire result is false. 
    suppose if the expression finds false value inittially then it will not go forward from there only it written the false.
    ex. (4> 5) && (5>2)   result is false.
         0 && 'hello'   result is 0.
    we can use the and operator with truthy and falsy values also. if the initial expression gives false value then it will give result false. and suppose
    the initial value result is true then it will give the result of next expression.
    ex. 'hello' &&  2+3  result is 5.
 2) or operator -> if any result is true then it will give the result true. it will check initial expression if it is the true then it will not go forward 
    from there only it written the true.
    ex.- (4< 5) || (5>8)   result is true.
         'hello' ||  0  result is 'hello'
    we can use the or operator with truthy and falsy values also. if the initial expression gives true value then it will give result true. and suppose
    the initial value result is flase then it will give the result of next expression.
    ex. 'null' &&  2+3  result is 5.
 3) not operator -> if the expression result is false then it will give the overall result false. and vice versa.

// Bitwise operator in javascript
 -- and, or, not || &, |, !

// Decision Making in JavaScript 
1) IF Statement
2) IF-ELSE Statement
3) ELSE-IF Statement
4)  nested IF-ELSE Statement
5) switch Statement

// ternary operator

// how to see variable address in dev tools
#when we create the variable that store it into the somewhere with memory address and value of that variable is stored somewhere. with the value memory address we can refer to the
 variable name.
 ex. suraj @442979 - suraj value is stored at address @442979
     name  @442979 with new memry address of its own   - name which is variable name store the value @442979 and place at new memory address.

// Objects in JavaScript
there is only one type of non-primitive data type that is called object.
objects are further divided into 3 categories.
 - Object Literals
 - Arrays
 - functions
# Object.freeze( ) vs Object.seal( ) in JavaScript 
- when you want no one can modify your object ( no delete, no add) then we use the object.seal method but you can modify the properties inside the object
- when you want no one can (modify, delete, add) properties in object then you must use the object.freeze method.

// Arrays in Javascript
 - push, pop, shift, unshift, concat , indexOf, includes, reverse, sort, slice , splice
 # Multidimensional Arrays  
   - Multidimensional arrays are also called as array inside the array element
 # Right Way to Copy Objects and Arrays 
   - Deep copy   -> this is the new way . we use the JSON.parse(JSON.stringify(arrayName));
   - Shallow Copy  -> old way. we use Object.assign  or spread operator

// combined assignment operator
  -+= , -=, *= , /= , %= ,  **= , ++ , --
  preincrement => ++i;
  postincrement => i++;
  predecrement => --i;
  postdecrement => i--;

//loops in javascript
for , while , do-while , for-of , for-in
//break and continue in javascript  
  - use to jump out of" a code block.
  -continue => skip one loop iteration.
  -break => jump out of a loop or a switch or a block.

// functions in javascript
- function declaration
- function call
- arrow function in javascript
- return keyword in javascript
  The return statement stops the execution of a function and returns a value.

// execution context in javascript
- code is executed in two phase
  1. memory allocation phase
  2. code execution phase
  - execution context is created when we call a function
  - execution context is destroyed when we exit a function
  - execution context is created for global scope also
  suppose in the function we calling some other function then at the time of memorhy creation the new execution context is created then again inside it momory creation and code execution.

//call stack in javascript
by default anonyms function is there in the stack.
stack data structure which track the functions which are going the execute. if the fuction calls itself multiple times thene our stack gets overflow.
- call stack is used to track the execution of the function.

// Hoisting in javascript
- Temporal Dead Zone in javascript => area of code where the variable are store and computer can not access the those variables until the memorhy intializes it.
- temporal dead zone is created for the const and let keyword. for the var it gives the value undefined 
Hoinsting is javascript default behaviour of moving declaration to the top.
variable can be used before declared.
function expression
  const sayHii = function(){
    console.log("hii");
  }
function declaration
  function sayHii(){
    console.log("hii");
  }
sayHii();   //function call
we can do the function defination
  1. function declaration
  2. function expression

// global and local scope
Global Scope -> 
  script scope  -> create for the const and let keyword.
  window object.
     if we access the script scope variable using the window object it gives us the undefined.
     window object create for the var and functions.
     Local Scope -> variables scope valid only for that block. can not access outside the block
                    only for the functions.
  Let and Const variable having block scoped variable while var having global scope variable.
Block scope -> const and let are the block scoped variable. if we use variable var then we can use outside the block and inside the function only.
  we can only declare variable like num2 =23; and this variable goes into the window object.
  to avoid this we write top of the code "use strict"
closure => suppose we declare the function parent and inside the function there is function child.
  so inside the child function we are accessing the parent function variables then those variables are called as closures.
  closure is the function which has access to the outer function variables even after the outer function is destroyed
Module Scope => 

// Higher order functions
  argument => pass while calling the function
  parameters => pass at the time of the function declaration 
  return type => return type of the function
  #callback function => when a function is passed as argument to the another function is called as callback function.
  #higher order function => function which takes another function as argument or return the function as output.

// setTimeOut and setInterval
setTimeout() => function which is going to execute after the specified time.
setInterval() => function which is going to execute after the specified time and it will keep on executing
clearTimeout() => function which is going to stop the execution of the function.
clearInterval() => function which is going to stop the execution of the function.

// Event Loop and Callback Queue
  Event Loop => event loop is the intermediate between call stack and callback queue.
  callback queue => callback queue is the queue where all the callback function are stored.
  call stack => call stack is the stack where all the function are stored.
  Asynchronous code => allows the program to executed immediately where the synchronous code will block the further execution of the remaining code until it finishes the current one.

// difference between methods and functions
  methods => methods are the functions which are attached to the object.
  functions => functions are the standalone functions which are not attached to any object.

// arrow function
   addded in es6 feature

//for - of and for - in loop
  for-of => used over the iterable object like array, string , map , set
  for-in => used over the non iterable object like where we store key - value pair 

//for-each array method in javascript
  we can use the foreach loop over the array.
  we can use the foreach loop over the object but for this we need to create into the array.
  for-each method does't return anything. it will retrun the undefined.

//Map, filter ,reduce method in javascript
  map() => used to create the new array from the existing array.
  filter() => used to filter the array and return the new array.
  reduce() => used to reduce the array into the single value.
  find() => used to find the first element in the array which satisfy the given condition.
  findIndex() => used to find the index of the first element in the array which satisfy the
  some() => used to check whether the array contains at least one element which satisfy the given condition
  every() => used to check whether the array contains all the elements which satisfy the given condition
  sort() => used to sort the array in ascending or descending order
  reverse() => used to reverse the array
  concat() => used to merge the two or more array into the single array
  join() => used to join the array into the string

// Arguments keyword in javascript
  arguments keyword is used to access the arguments of the function.
  
//ES6 featueres
1. Default parameters
   we used the default parameters to assign the value to the parameters.
   for ex. function add(a , b=6)    so here we assign the parameter b to default value 6.
2. spread operator
   (...) allows us to quickly copy all or part of an existing array or object into another array or object.
   it basically split the array elements
   we will use spread operator at the time of the function call.
3. rest operator or rest parameters
   rest operator is used to pass the multiple argument to the function.
   it is collect all the parameters and converted it into the array.
   rest parameter must be last formal parameters.
   used at the time of function definition
4. destructuring in javascript 
   majorly it is used with array and the object.

//BOM => Browser Object Model
  window object represents an open window in a browser. browser creates one window object for the HTML document. this object provides us the some methods and the properties.
  BOM is an object created by the browser.
  window.location => points to the url
//DOM => Document Object Model
  There is difference between innertext and innerHTMl.
  In Browser there is component called htmlParser which converts the html into object format called document.
  it represent only viewport. window object is represent to the whole browser.
  we have access of the DOM and we can perform different actions on it that's we called as DOM manipulation.
  DOM is an object created by the browser.
  DOM is a tree like structure.
  DOM is a collection of all the HTML elements.

//DOM manipulation

//innerText and textContent in JavaScript
  innerHTMl => in innerHTML we can write the HTML tag by selecting the specific tag, class, id name.
  innerText => in innerText we can only see the text content. if we select the innseText by id, class and replace the text but we can not add the tags here.
  textContent => textContent is like it will give all the text including the space , new line and also hidden text.

//getAttribute and setAttribute in JavaScript 
  attributes provide additional information about HTML elements.
  Attributes usually come in name/value pairs like: name="value"
  
//How to apply styles in JavaScript 
  
//Access Parent Sibling & Children Elements using JavaScript
  
//What is the Difference Between Element and Node?
  Node - IN javascript there is different type of the object we called as Node.
  // har ek element node hota hai lekin har ek node element nahi hota hai.

//What is the difference between append and appendChild? 
  append => it means that add at the end of the document.
  container.appendChild(h1);
  the differnce is appendChild will return the node is append. ex. conatiner.appendChild(h1) here h1 element will return 
  but in append we can't get any return value. it will return undefined.
  appendChild is used to add the child element in the parent element.
  append is used to add the child element at the end of the parent element.
  by using append we can append multiple things like conatiner.append('hello' , h1 , 'world') but we can't do this using appendChild.
  appendChild is used to add the single child element in the parent element.